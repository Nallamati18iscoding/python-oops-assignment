Q1. What is the purpose of Python's OOP?
ans)Python OOPs Concepts. Python is an object-oriented programming language. It allows us to develop applications using Object Oriented approach. In Python, we can easily create and use classes and objects. Major principles of object-oriented programming system are given below. Object. Class. Method.

Q2. Where does an inheritance search look for an attribute?

ans). The term inheritance is applied because objects lower in a tree inherit attributes attached to objects higher in that tree. As the search proceeds from the bottom up, in a sense, the objects linked into a tree are the union of all the attributes defined in all their tree parents, all the way up the tree.

Q3. How do you distinguish between a class object and an instance object?

ans)What is an Object?

Objects are the results of instantiating a class. Instantiation is the process of taking the blueprint and defining each attribute and behavior so that the resultant object actually represents a real life object. Object is a dedicated and continuous block of memory allocated to store information such as variables, methods or functions, etc. Object is created with the use of new operator, in Java programming language. For example, if there is a class called Car, then the following can be used to create an object of the Car class.

new Car();

Here, a Car object is created by the new operator and a reference to object is returned. The new operator along with the constructor of the Car class is used to create the new object. The life span of the object starts from the call to its constructor to the time it is destroyed. Once an object is not referred, it will be removed/ destroyed by the garbage collector.

What is an Instance?

Instance is a memory block, which contains the reference to an object. In other words, Instance will keep the address of the starting memory block where the object is stored. Actually, the name of the instance can be used to access the start of the object memory area. Offsets from the starting memory is calculated by the runtime engine so that we can go to where the individual data or method references are stored. Following Java code snipped can be used to create an instance of a Car object.

Car myCar = new Car();

Q4. What makes the first argument in a class’s method function special?
ans)The first argument of the class method is self.

Q5. What is the purpose of the init method?
ans we can use __init__() method for initializing an object.

Q6. What is the process for creating a class instance?
ans "This would create first object of Employee class"
emp1 = Employee("vsr", 2000)
"This would create second object of Employee class"
emp2 = Employee("ram", 5000)
Q7. What is the process for creating a class?
ans) class Employee:
   'Common base class for all employees'
   empCount = 0
   def __init__(self, name, salary):
      self.name = name
      self.salary = salary
      Employee.empCount += 1
   def displayCount(self):
      print "Total Employee %d" % Employee.empCount
   def displayEmployee(self):
      print "Name : ", self.name, ", Salary: ", self.salary

Q8. How would you define the superclasses of a class?
ans)  In object-oriented programming, a class from which other classes inherit code is called a superclass. Furthermore, the class that inherits the code is called a subclass of that superclass. Typically, a subclass inherits the instance variables and member functions of its superclass.

Q9. What is the relationship between classes and modules?
ans)  it is simply a code containing variables, functions, and classes. Modules are files present inside a package, whereas a class is used to encapsulate data and functions together inside the same unit. That wraps up the difference between python class vs module.


Q10. How do you make instances and classes?

Q11. Where and how should be class attributes created?

Q12. Where and how are instance attributes created?

Q13. What does the term "self" in a Python class mean?

Q14. How does a Python class handle operator overloading?

Q15. When do you consider allowing operator overloading of your classes?

Q16. What is the most popular form of operator overloading?

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Q18. Describe three applications for exception processing.

Q19. What happens if you don't do something extra to treat an exception?

Q20. What are your options for recovering from an exception in your script?

Q21. Describe two methods for triggering exceptions in your script.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?
ans) while writing a code we know that there might be some error that we can predict before hand,so in order to make the code run we use try statements so we can run the code .

Q24. What are the two most popular try statement variations?

Q25. What is the purpose of the raise statement?
ans) Python raise Keyword is used to raise exceptions or errors. The raise keyword raises an error and stops the control flow of the program. It is used to bring up the current exception in an exception handler so that it can be handled further up the call stack.

Q26. What does the assert statement do, and what other statement is it like?
ans)Python assert Statement Python has built-in assert statement to use assertion condition in the program. assert statement has a condition or expression which is supposed to be always true. If the condition is false assert halts the program and gives an AssertionError. Syntax for using Assert in Pyhton:

Q27. What is the purpose of the with/as argument, and what other statement is it like?
ans) with statement is used in exception handling to make the code cleaner and much more readable. It simplifies the management of common resources like file streams. Observe the following code example on how the use of with statement makes code cleaner.

Q28. What are *args, **kwargs?
ans) *args are non keyvalued arguments and **kwargs are keyvalue arguments 

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?
ans) lamda functions are efficent and less time taking compared to creating  a function.

Q31. Explain Inheritance in Python with an example?
ans)One of the core concepts in object-oriented programming (OOP) languages is inheritance. It is a mechanism that allows you to create a hierarchy of classes that share a set of properties and methods by deriving a class from another class. Inheritance is the capability of one class to derive or inherit the properties from another class. 

Benefits of inheritance are: 
-It represents real-world relationships well.
-It provides the reusability of a code. We don’t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.
-It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.
-Inheritance offers a simple, understandable model structure. 
-Less development and maintenance expenses result from an inheritance. 

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
ans) 
class MyClass(object):
  pass
class MySubClass(MyClass):
  pass
print(isinstance(MySubClass, object))
print(issubclass(MySubClass, MyClass))
print(isinstance(MySubClass, MyClass))

Q34.Explain the use of the 'nonlocal' keyword in Python.
ans we use nonlocal keyword to explicitly instruct Python that we’re modifying a nonlocal variable. When you use the nonlocal keyword for a variable, Python will look for the variable in the enclosing local scopes chain until it first encounters the variable name.

Q35. What is the global keyword?
Global keyword is a keyword that allows a user to modify a variable outside of the current scope. It is used to create global variables from a non-global scope i.e inside a function. Global keyword is used inside a function only when we want to do assignments or when we want to change a variable .global keyword


